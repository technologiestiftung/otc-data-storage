// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url = "***"
}

// datasource db {
//   provider = "postgresql"
//   url = "***"
// }

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model Camera {
  id                   Int                  @id @default(autoincrement())
  createdAt            DateTime             @default(now())
  // active               Boolean // deprecated
  name                 String
  location             String
  timezone             Int
  transformationMatrix String?
  owner                String?
  software             String?
  softwareHistory      String?
  hardware             String?
  // Geometry(Point, 4326)
  // try and error view of the camera as geo object
  // polygon
  geom                 String?
  // Geometry(Line, 4326)
  angle                String?
  trajectories         Trajectory[]
  weathers             Weather[]
  lightningConditions  LightningCondition[]
  // Counter              Counter[]
  recordings           Recording[]
}

model Recording {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  recordingStart DateTime
  recordingEnd   DateTime
  counters       Counter[]
  camera         Camera?   @relation(fields: [cameraId], references: [id])
  cameraId       Int?
}

// Counter should be equivalent to Counter
// https://opendatacam.github.io/opendatacam/apidoc/#api-Counter
// curl "http://192.168.1.210:8080/counter/areas"
model Counter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  street    String
  // manually
  streetId  String // or Int?
  x1        Float
  y1        Float
  x2        Float
  y2        Float


  // Geometry(Line, 4326)
  // createa manually by try and error :D
  // if we have a geom on the camera
  // we can calculate that line string from the coordinates
  line        String
  // should be actually
  // - bidirectional
  // - left
  // - right
  direction   String
  detections  Detection[]
  recording   Recording?  @relation(fields: [recordingId], references: [id])
  recordingId Int?
  comment     String?
}

// is there also a detection object which holds all the objects
// of every frame detected?
// https://opendatacam.github.io/opendatacam/apidoc/#api-Recording-Counter_data
model Detection {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  detectedAt      DateTime
  confidence      Int
  // could have a relation to the trajectories
  trajectory      Trajectory?    @relation(fields: [trajectoryId], references: [id])
  trajectoryId    Int?
  counter         Counter?       @relation(fields: [counterId], references: [id])
  counterId       Int?
  detectionType   DetectionType? @relation(fields: [detectionTypeId], references: [id])
  detectionTypeId Int?
}

model DetectionType {
  id           Int          @id @default(autoincrement())
  label        String       @unique
  description  String?
  trajectories Trajectory[]
  detections   Detection[]

}

// is a collection of detections
// replace by the track object
// https://opendatacam.github.io/opendatacam/apidoc/#api-Recording-Tracker_data
//
model Trajectory {
  id Int @id @default(autoincrement())

  // Geometry(LineStringM, CUSTOM_ID)
  trajectory String

  // Geometry(LineStringM, 4326)
  geom       String
  start      DateTime
  end        DateTime
  detections Detection[]

  detectionType   DetectionType? @relation(fields: [detectionTypeId], references: [id])
  detectionTypeId Int?
  camera          Camera?        @relation(fields: [cameraId], references: [id])
  cameraId        Int?
}

model Weather {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  recordedAt    DateTime
  humidity      Float?
  pressure      Float?
  cloudCoverage Float?
  rain          Float?
  temperature   Float?
  wind          Float?
  windDirection Float?
  camera        Camera?  @relation(fields: [cameraId], references: [id])
  cameraId      Int?
}

// could also be some sensordata taken from the
// enviro plus
model LightningCondition {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  recordedAt DateTime
  value      Float
  camera     Camera?  @relation(fields: [cameraId], references: [id])
  cameraId   Int?
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
}
